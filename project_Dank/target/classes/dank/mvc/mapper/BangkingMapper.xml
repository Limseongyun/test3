<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="bangking">
  
<!--  @계좌조회(처음 조회눌렀을때 세션에서 멤버코드를 가지고 그멤버가 가진 계좌 리스트를 뽑아온다) -->
	  <resultMap type="acvo" id="acinqueryResult">
			<id property="ac_num" column="ac_num"/>
			<result property="ac_balance" column="ac_balance"/>
			<result property="ac_code" column="ac_code"/>
			<result property="ac_pwd" column="ac_pwd"/>
			<result property="ac_name" column="ac_name"/>
			<result property="ac_start_date" column="ac_start_date"/>
			<collection property="saving" resultMap="savResult"></collection>
			<collection property="ins" resultMap="insResult"></collection>
		</resultMap>
		<resultMap type="savvo" id="savResult">
			<id property="sav_code" column="sav_code"/>
			<result property="sav_name" column="sav_name"/>
			<result property="shas_code" column="shas_code"/>
		</resultMap>
		<resultMap type="insvo" id="insResult">
			<id property="ins_code" column="ins_code"/>
			<result property="ins_name" column="ins_name"/>
			<result property="shac_code" column="shac_code"/>
		</resultMap>
	<select id="acinquery" resultMap="acinqueryResult" parameterType="int" >
		select a.ac_num ac_num
			,a.ac_code ac_code
			,a.ac_balance ac_balance
			,to_char(a.ac_start_date,'yyyy-MM-dd') ac_start_date
			,nvl(a.ac_name,'HD') ac_name
			,nvl(s.sav_code,0) sav_code
			,nvl(s.sav_name,0) sav_name
			,nvl(s.shas_code,0) shas_code
			,nvl(ins.ins_code,0) ins_code
			,nvl(ins.ins_name,0) ins_name
			,nvl(ins.shac_code,0) shac_code
		from 
		account_client ac
		,account a
		,product p
		,saving s
		,installment_saving ins
		where ac.mem_code=#{mem_code}
		 and ac.ac_code =a.ac_code 
		 and ac.pro_code=p.pro_code 
		 and p.sav_code =s.sav_code(+) 
		 and p.ins_code = ins.ins_code(+)
	</select>
	
	<!-- 계좌상세 조회 -->
	<select id="acdetail" parameterType="int" resultMap="acinqueryResult">
		select a.ac_num ac_num
			,a.ac_code ac_code
            ,a.ac_pwd ac_pwd
			,a.ac_balance ac_balance
			,to_char(a.ac_start_date,'yyyy-MM-dd') ac_start_date
			,nvl(a.ac_name,'HD') ac_name
			,nvl(s.sav_code,0) sav_code
			,nvl(s.sav_name,0) sav_name
			,nvl(s.shas_code,0) shas_code
			,nvl(ins.ins_code,0) ins_code
			,nvl(ins.ins_name,0) ins_name
			,nvl(ins.shac_code,0) shac_code
		from 
		account_client ac
		,account a
		,product p
		,saving s
		,installment_saving ins
		where ac.ac_code = #{ac_code}
		 and ac.ac_code =a.ac_code 
		 and ac.pro_code=p.pro_code 
		 and p.sav_code =s.sav_code(+) 
		 and p.ins_code = ins.ins_code(+)
               ORDER BY sav_code desc
	</select>
<!--  /@계좌조회 끝(처음 조회눌렀을때 작동) -->


<!-- @입금 시작(입금 누르면 돈이 들어온다. 지점에서 현금을 받는다는 가정) -->
		<!--1계좌유효성검사 적힌 계좌가 DB에 담겨있는지 count 를 반환한다 -->
		<select id="depcheckac" parameterType="String" resultType="int">
			select count(*)
			from account
			where ac_num=#{ac_num}
	  	</select>
	  	
	  	<!-- 계좌번호를 넣으면 멤버코드를 가져온다.(변경) -->
	  	<select id="actomemnum" parameterType="String" resultType="int">
<!-- 			select mem_code -->
<!-- 			from account -->
<!-- 			where ac_num=#{acnum} -->
			select ac.mem_code mem_code
			from account a
				, account_client ac
			where a.ac_num=#{ac_num} 
				and a.ac_code=ac.ac_code
	  	</select>
	  	
		<!--2입금테이블을 작성한다. -->
	  	<insert id="depplusdep" parameterType="String">
	  		insert into deposit values(deposit_seq.nextval,#{dep_money},sysdate)
	  	</insert>
		<!--3.입출금처리 테이블작성 -->
	  	<insert id="depplussp" parameterType="hashMap">
		insert into sav_process values(sav_process_seq.nextval
			,(select a.ac_code ac_code
				from account a
					, account_client ac
			where a.ac_num=#{ac_num}
				 and ac.mem_code=#{mem_code}
				  and a.ac_code=ac.ac_code)
			,#{sp_name}
			,(select max(dep_code)
			            from deposit)
			,null
			,null
			,( select a.ac_balance ac_balance
					from account a
						, account_client ac
					where a.ac_num=#{ac_num}
						 and ac.mem_code=#{mem_code} 
						 and a.ac_code=ac.ac_code)
			+(select dep_money 
		            from deposit 
		            where dep_code=(select max(dep_code) 
		                               from deposit))
		)
	  	</insert>
		<!--마지막 바뀐통장 잔액 업데이트한다 -->
	  	<update id="depdepupbalance" parameterType="hashMap">
		update account 
			set ac_balance=(select sp_balance 
			                from sav_process 
			                where sp_code=(select max(sp_code) 
			                                from sav_process))
			where ac_code=
			    (select a.ac_code ac_code
				from account a
					, account_client ac
				where a.ac_num=#{ac_num}
					 and ac.mem_code=#{mem_code}
					  and a.ac_code=ac.ac_code)
	  	</update>
<!-- /@입금 끝 -->
<!-- @출금시작 -->
		<!--1계좌가 DB에 있는지검사 -->
	  	<select id="witcheckac" parameterType="String" resultType="int">
			select count(*)
			from account
			where ac_num=#{ac_num}
	  	</select>
		<!--2계좌에 출금할수있는 잔액이 있는지 검사 -->
		<select id="witcheckbalance" parameterType="hashMap" resultType="String">
			select a.ac_balance ac_balance
			from account a
				, account_client ac
			where a.ac_num=#{ac_num}
				 and ac.mem_code=#{mem_code} 
				 and a.ac_code=ac.ac_code
		</select>
		<!--3출금표 작성 -->
	  	<insert id="witpluswit" parameterType="String"> 		
	  		insert into withdraw values(WITHDRAW_SEQ.nextval,#{wit_money},sysdate)
	  	</insert>
		<!--4입출금내역 작성 -->
	  	<insert id="witplussp" parameterType="hashMap">
		  	insert into sav_process values(sav_process_seq.nextval
				,(select a.ac_code ac_code
				from account a
					, account_client ac
				where a.ac_num=#{ac_num}
					 and ac.mem_code=#{mem_code}
					  and a.ac_code=ac.ac_code )
				,#{sp_name}
				,null
				,(select max(WIT_CODE)
				            from withdraw)
				,null
				,(select a.ac_balance ac_balance
				 from account a
				 	, account_client ac
				where a.ac_num=#{ac_num}
					 and ac.mem_code=#{mem_code}
					  and a.ac_code=ac.ac_code)-(select wit_money 
							                       from withdraw
							                       where wit_code=(select max(wit_code) 
							                                          from withdraw))
			)
	  	 
	  	</insert>
		<!--5잔액 업데이트 -->
		<update id="witwitupbalance" parameterType="hashMap">
			update account 
			set ac_balance=(select sp_balance 
			                from sav_process 
			                where sp_code=(select max(sp_code) 
			                                from sav_process))
			where ac_code=
			    (select a.ac_code ac_code
			    from account a
			    	, account_client ac
			    where a.ac_num=#{ac_num}
			    	 and ac.mem_code=#{mem_code}
			    	  and a.ac_code=ac.ac_code)
		</update>
<!-- /@출금 끝 -->
<!-- @계좌이체 시작 -->
		<!--if1.출금계좌A체크 -->
		<select id="tracchk" parameterType="String" resultType="int">
			select count(*)
		    from account
		    where ac_num=#{ac_num}
		</select>
		<!--if2.입금계좌B체크 -->
			<!-- 	1과동일 -->
		<!--if3.출금계좌A잔고체크 -->
		<select id="trbalchk" parameterType="trdto" resultType="String">
			select a.ac_balance ac_balance
		    from account a
		    	, account_client ac
		    where a.ac_num=#{ac_num}
		    	 and ac.mem_code=#{mem_code} 
		    	 and a.ac_code=ac.ac_code
		</select>
		<!--tr4.출금계좌A이체증,출금도(출금이랑95%비슷)작성 -->
		<insert id="trpluswit" parameterType="String">
			insert into withdraw values(WITHDRAW_SEQ.nextval,#{wit_money},sysdate)
	    </insert>
	    <insert id="trpluswittr" parameterType="trdto">
	    	insert into transfer values(transfer_seq.nextval,#{at_dps_ac},#{at_set_mony},sysdate)
	    </insert>
		<!--tr5.출금계좌A입출내역작성,(내통장에표시할거표시) -->
		<insert id="trplusspwit" parameterType="trdto">
			insert into sav_process values(sav_process_seq.nextval
	        ,(select a.ac_code ac_code
	        from account a
	        	, account_client ac
	        where a.ac_num=#{ac_num} 
	        	and ac.mem_code=#{mem_code}
	        	 and a.ac_code=ac.ac_code)
	        ,#{sp_name}
	        ,null
	        ,(select max(WIT_CODE)
	                    from withdraw)
	        ,(select max(AT_CODE)
	                    from transfer)
	        ,(select a.ac_balance ac_balance
	         from account a
	         		,account_client ac
	          where a.ac_num=#{ac_num}
	          		 and ac.mem_code=#{mem_code}
	          		  and a.ac_code=ac.ac_code)-(select wit_money 
									               from withdraw
									               where wit_code=(select max(wit_code) 
									                                  from withdraw))
	        )
		</insert>
		<!--tr6.출금계좌A통장잔고 업데이트 -->
		<update id="trtrwitupbal" parameterType="trdto">
		 	update account 
	        set ac_balance=(select sp_balance 
	                        from sav_process 
	                        where sp_code=(select max(sp_code) 
	                                        from sav_process))
	        where ac_code=
	            (select a.ac_code ac_code
	            from account a
	            	, account_client ac
	            where a.ac_num=#{ac_num}
	            	 and ac.mem_code=#{mem_code}
	            	  and a.ac_code=ac.ac_code)
		</update>
		<!--tr7.입금계좌B 입금증,이체증작성 -->
		<select id="trplusdep" parameterType="String">
			insert into deposit values(deposit_seq.nextval,#{dep_money},sysdate)
		</select>
		<select id="trplusdeptr" parameterType="trdto">
			insert into transfer values(transfer_seq.nextval,#{at_dps_ac},#{at_set_mony},sysdate)
		</select>
		<!--tr8.입금계좌B 입출내역작성(받는분통장에 표시할거 표시) -->
		<insert id="trplusspdep" parameterType="trdto">
			insert into sav_process values(sav_process_seq.nextval
		    ,(select a.ac_code ac_code
		    from account a
		    	, account_client ac
		    where a.ac_num=#{ac_num}
		    	 and ac.mem_code=#{mem_code}
		    	  and a.ac_code=ac.ac_code)
		    ,#{sp_name}
		    ,(select max(dep_code)
		                from deposit)
		    ,null
		    ,(select max(at_code)
		                from transfer)
		    ,(select a.ac_balance 
		      from account a
		      		, account_client ac 
		      where a.ac_num=#{ac_num}
		      		 and ac.mem_code=#{mem_code} 
		      		 and a.ac_code=ac.ac_code)
		    +(select dep_money 
		           from deposit 
		           where dep_code=(select max(dep_code) 
		                              from deposit))
		    )
		</insert>
		
		<!--어드민계좌 일경우   -->
		<!--if3.출금계좌A잔고체크 -->
		<select id="trbalchkadmin" parameterType="hashMap" resultType="String">
			select a.ac_balance ac_balance
		    from account a
		    	, account_admin ac
		    where a.ac_num='9001111111'
		    	 and ac.hd_code=2
		    	 and a.ac_code=ac.ac_code
		</select>
		<!--tr5.출금계좌A입출내역작성,(내통장에표시할거표시) -->
		<insert id="trplusspwitadmin" parameterType="hashMap">
			insert into sav_process values(sav_process_seq.nextval
	        ,(select a.ac_code ac_code
	        from account a
	        	, account_admin ad
	        where a.ac_num=#{ac_num} 
	        	and ad.hd_code=#{hd_code}
	        	 and a.ac_code=ad.ac_code)
	        ,#{sp_name}
	        ,null
	        ,(select max(WIT_CODE)
	                    from withdraw)
	        ,(select max(AT_CODE)
	                    from transfer)
	        ,(select a.ac_balance ac_balance
	         from account a
	         		,account_admin ad
	          where a.ac_num=#{ac_num}
	          		 and ad.hd_code=#{hd_code}
	          		  and a.ac_code=ad.ac_code)-(select wit_money 
									               from withdraw
									               where wit_code=(select max(wit_code) 
									                                  from withdraw))
	        )
		</insert>
		<!--tr6.출금계좌A통장잔고 업데이트 -->
		<update id="trtrwitupbaladmin" parameterType="hashMap">
		 	update account 
	        set ac_balance=(select sp_balance 
	                        from sav_process 
	                        where sp_code=(select max(sp_code) 
	                                        from sav_process))
	        where ac_code=
	            (select a.ac_code ac_code
	            from account a
	            	, account_admin ad
	            where a.ac_num=#{ac_num}
	            	 and ad.hd_code=#{hd_code}
	            	  and a.ac_code=ad.ac_code)
		</update>
		
		
		
		<!--tr8.입금계좌B 입출내역작성(받는분통장에 표시할거 표시) -->
		<insert id="trplusspdepadmin" parameterType="hashMap">
			insert into sav_process values(sav_process_seq.nextval
		    ,(select a.ac_code ac_code
		    from account a
		    	, account_admin ad
		    where a.ac_num=#{ac_num}
		    	 and ad.hd_code=#{hd_code}
		    	  and a.ac_code=ad.ac_code)
		    ,#{sp_name}
		    ,(select max(dep_code)
		                from deposit)
		    ,null
		    ,(select max(at_code)
		                from transfer)
		    ,(select a.ac_balance 
		      from account a
		      		, account_admin ad 
		      where a.ac_num=#{ac_num}
		      		 and ad.hd_code=#{hd_code} 
		      		 and a.ac_code=ad.ac_code)
		    +(select dep_money 
		           from deposit 
		           where dep_code=(select max(dep_code) 
		                              from deposit))
		    )
		</insert>
		<!--tr9.입금계좌B 통장잔고 업데이트 -->
	  	<update id="trtrdepupbaladmin" parameterType="hashMap">
	  		update account 
			set ac_balance=(select sp_balance 
			                from sav_process 
			                where sp_code=(select max(sp_code) 
			                                from sav_process))
			where ac_code=
			    (select a.ac_code ac_code
			    from account a ,account_admin ad
			    where a.ac_num=#{ac_num} and ad.hd_code=#{hd_code} and a.ac_code=ad.ac_code)
	  	</update>
		<!--어드민 계좌일 경우 끝  -->
		<!--tr9.입금계좌B 통장잔고 업데이트 -->
	  	<update id="trtrdepupbal" parameterType="hashMap">
	  		update account 
			set ac_balance=(select sp_balance 
			                from sav_process 
			                where sp_code=(select max(sp_code) 
			                                from sav_process))
			where ac_code=
			    (select a.ac_code ac_code
			    from account a ,account_client ac
			    where a.ac_num=#{ac_num} and ac.mem_code=#{mem_code} and a.ac_code=ac.ac_code)
	  	</update>
<!-- /@계좌이체 끝 -->

<!--@거래내역 가져오기 시작 -->
		<select id="acAllHistory" parameterType="hashMap" resultType="achvo">
		  select 
			r_num
			, dealdate
			, dep_money
			, wit_money
			, balance
			, name
            ,sp_code
			from(
			select rownum r_num, dealdate, dep_money, wit_money, balance, name,sp_code
			from(
			select COALESCE(to_char(d.dep_date,'YYYY-MM-DD HH24:MI')
			,to_char(w.wit_date,'YYYY-MM-DD HH24:MI')) dealdate
			, d.dep_money dep_money
			,w.wit_money wit_money
			,sp.sp_balance balance
			, sp.sp_name name
            ,sp.sp_code sp_code
			from account a
			,account_client ac 
			,sav_process sp
			, deposit d
			, withdraw w
			where ac.mem_code=#{mem_code}
			 and a.ac_code=ac.ac_code 
			 and a.ac_code=(select a.ac_code
			 				 from account a, account_client ac
			 				  where a.ac_num=#{ac_num}
									  and ac.mem_code=#{mem_code}
									   and ac.ac_code=a.ac_code) 
			  and sp.ac_code=(select a.ac_code 
			  					from account a, account ac 
			  					where a.ac_num=#{ac_num} and ac.mem_code=#{mem_code}
			  							and a.ac_code = ac.ac_code) 
			  and d.dep_code(+)=sp.dep_code
			   and w.wit_code(+) = sp.wit_code
			order by sp_code desc
			)
			)
		</select>


		<!-- 	거래내역 가져오기 ,숫자,거래날자,입금액,출금액,잔액,이름 -->
	  <select id="achistory" parameterType="hashMap" resultType="achvo">
			  select 
			r_num
			, dealdate
			, dep_money
			, wit_money
			, balance
			, name
            ,sp_code
			from(
			select rownum r_num, dealdate, dep_money, wit_money, balance, name,sp_code
			from(
			select COALESCE(to_char(d.dep_date,'YYYY-MM-DD HH24:MI')
			,to_char(w.wit_date,'YYYY-MM-DD HH24:MI')) dealdate
			, d.dep_money dep_money
			,w.wit_money wit_money
			,sp.sp_balance balance
			, sp.sp_name name
            ,sp.sp_code sp_code
			from account a
			,account_client ac 
			,sav_process sp
			, deposit d
			, withdraw w
			where ac.mem_code=#{mem_code}
			 and a.ac_code=ac.ac_code 
			 and a.ac_code=(select a.ac_code
			 				 from account a, account_client ac
			 				  where a.ac_num=#{ac_num}
									  and ac.mem_code=#{mem_code}
									   and ac.ac_code=a.ac_code) 
			  and sp.ac_code=(select a.ac_code 
			  					from account a, account ac 
			  					where a.ac_num=#{ac_num} and ac.mem_code=#{mem_code}
			  							and a.ac_code = ac.ac_code) 
			  and d.dep_code(+)=sp.dep_code
			   and w.wit_code(+) = sp.wit_code
			order by sp_code desc
			)
			)
			where r_num between #{start} and #{end}
	  </select>
	  <!--******조회시 	거래내역 가져오기 ,숫자,거래날자,입금액,출금액,잔액,이름 -->
	  <select id="achistory_slct" parameterType="hashMap" resultType="achvo">
	 	 select 
			r_num
			, dealdate
			, dep_money
			, wit_money
			, balance
			, name
            ,sp_code
			from(
			select rownum r_num, dealdate, dep_money, wit_money, balance, name,sp_code
			from(
			select COALESCE(to_char(d.dep_date,'YYYY-MM-DD HH24:MI')
			,to_char(w.wit_date,'YYYY-MM-DD HH24:MI')) dealdate
			, d.dep_money dep_money
			,w.wit_money wit_money
			,sp.sp_balance balance
			, sp.sp_name name
            , sp.sp_code sp_code
			from account a
			,account_client ac 
			,sav_process sp
			, deposit d
			, withdraw w
			where ac.mem_code=#{mem_code}
			 and a.ac_code=ac.ac_code 
			 and a.ac_code=(select a.ac_code
			 				 from account a, account_client ac
			 				  where a.ac_num=#{ac_num}
									  and ac.mem_code=#{mem_code}
									   and ac.ac_code=a.ac_code) 
			  and sp.ac_code=(select a.ac_code 
			  					from account a, account_client ac 
			  					where a.ac_num=#{ac_num} and ac.mem_code=#{mem_code}  
			  							and a.ac_code = ac.ac_code) 
			  and d.dep_code(+)=sp.dep_code
			   and w.wit_code(+) = sp.wit_code
			order by sp_code desc
			)
			)
			where r_num between #{start} and #{end}  and substr(dealdate,0,10) between #{startdate} and #{lastdate}

	  </select>
<!-- 	  모달창 거래구분위해서 -->
	<select id="classification" parameterType="String" resultType="smvo">
		select dep_code,wit_code,at_code 
		from sav_process
		where sp_code =#{sp_code}
	</select>
<!--  모달계좌이체버젼 -->
	<select id="modal_tr" parameterType="String" resultType="smvo">
	select tr.at_date at_date,sp.sp_name sp_name,tr.at_dps_ac at_dps_ac,tr.at_set_mony at_set_mony
	from sav_process sp,transfer tr
	where sp.at_code = tr.at_code and sp.sp_code=#{sp_code}
	</select>
<!-- 	모달입금버전 -->
	<select id="modal_dep" parameterType="String" resultType="smvo">
	select dep.dep_date dep_date,sp.sp_name sp_name,dep.dep_money dep_money
	from sav_process sp,deposit dep
	where sp.dep_code=dep.dep_code and sp.sp_code=#{sp_code}
	</select>
<!-- 	모달출금버전 -->
	<select id="modal_wit" parameterType="String" resultType="smvo"> 
	select wit.wit_date wit_date,sp.sp_name sp_name,wit.wit_money wit_money
	from sav_process sp,withdraw wit
	where sp.wit_code=wit.wit_code and sp.sp_code =#{sp_code}
	</select>
	  
	  
	  
	  
	  
	  
		<!--페이징처리를 위한 총 갯수 가져오기 -->
	  <select id="totalcnt" resultType="int" parameterType="hashMap">
		  select count(*)
		   from sav_process
		    where ac_code =(select a.ac_code ac_code
		    				 from account a, account_client ac
		    				  where ac_num=#{ac_num} and mem_code=#{mem_code} and a.ac_code =ac.ac_code)
	  </select>
		<!--이체에서 계좌확인 눌렀을때 그계좌의 멤버코드를 들고온다 -->
		<resultMap type="hashMap" id="getmemwhentrResult">
			<result javaType="String" column="mem_code" property="mem_code"/>
			<result javaType="String" column="mem_name" property="mem_name" />
		</resultMap> <!-- 궁금해서 해봄 -->
	  <select id="getmemcodewhentr" parameterType="String" resultMap="getmemwhentrResult">
		 	 select  nvl(mem_name,0) mem_name, nvl(mem_code,0) mem_code
				from(
				select ac.mem_code mem_code, m.mem_name mem_name
				from account a,member m,account_client ac
				where a.ac_num=#{ac_num} and ac.mem_code=m.mem_code and a.ac_code=ac.ac_code
				) right outer join dual on 1=1
	  </select>
	<!--이체하기 로 이동하면 자동으로 내 세션의 계좌리스트를 뽑아온다 -->
	  <select id="getmyaclistwhentr" resultType="String" parameterType="hashMap" >
			select ac_num
            from(
            select a.ac_num ac_num, case when ac_num =#{ac_num} then '1' else '0' end doghell
			from account a,account_client ac ,product p
			where ac.mem_code=#{mem_code} and a.ac_code=ac.ac_code and ac.pro_code=p.pro_code and p.ins_code is null
            order by doghell desc, a.ac_num asc
            )
	  </select>
	  
	<!-- 계좌이체할때 금액입력할때 키업으로 금액 가져옴 -->
	<select id="getmybalwhentr" resultType="String" parameterType="hashMap">
		select ac_balance from account a, account_client ac where ac.mem_code=#{mem_code} and a.ac_num=#{ac_num} and a.ac_code=ac.ac_code
	</select>
<!--/@거래내역 가져오기 끝 -->
<!-- @자동이체 시작 -->
	<insert id="atapply" parameterType="atapplyvo">
	insert into at_application
	 values(at_application_seq.nextval
	 		,(select a.ac_code 
	 			from account a, account_client ac
	 			 where ac.mem_code=#{mem_code}
	 			 	 and a.ac_num=#{ac_num}
	 			 	 and a.ac_code = ac.ac_code)
	 		,#{ata_yourac}
	 		,#{ata_setmoney}
	 		,#{ata_startdate}
	 		,#{ata_time}
	 		,#{ata_stopdate}
	 		,#{ata_dterm}
	 		,#{ata_myacmemo}
	 		,#{ata_youracmemo}
	 		,#{ata_check}
	 		,#{ata_ing}
	 		,#{ata_yourmemcode}
	 		,#{mem_code}
	 		
	 		)
	 		
	</insert>
	
	
	<select id="atloadval" resultType="atapplyvo">
					select a.ac_num ac_num
                  , atapply.ata_yourac ata_yourac
                  ,atapply.ata_setmoney ata_setmoney
                  ,atapply.ata_youracmemo ata_youracmemo
                  ,atapply.ata_myacmemo ata_myacmemo
                  ,atapply.ata_startdate ata_startdate
                  ,atapply.ata_stopdate ata_stopdate
                  ,atapply.ata_dterm ata_dterm
                  ,atapply.ata_time ata_time
                  ,atapply.ata_yourmemcode ata_yourmemcode
                  ,atapply.ata_mymemcode ata_mymemcode
                  ,atapply.ata_code ata_code
                  from account a, at_application atapply
                  where a.ac_code = atapply.ac_code and atapply.ata_check in(0,-1)
	</select>
	
	<update id="afterchkup" parameterType="String">
	update at_application set ata_check = 1 where ata_code=#{ata_code}
	</update>
	
	
	<resultMap type="hashMap" id="atlistResult">
		<result column="ac_num" property="ac_num"/>
		<result column="myname" property="myname"/>
		<result column="ata_myacmemo" property="ata_myacmemo"/>
		<result column="ata_yourac" property="ata_yourac"/>
		<result column="yourname" property="yourname"/>
		<result column="ata_youracmemo" property="ata_youracmemo"/>
		<result column="ata_startdate" property="ata_startdate"/>
		<result column="ata_stopdate" property="ata_stopdate"/>
		<result column="ata_setmoney" property="ata_setmoney"/>
		<result column="ata_dterm" property="ata_dterm"/>
		<result column="ata_time" property="ata_time"/>
		<result column="ata_ing" property="ata_ing"/>
		<result column="ata_check" property="ata_check"/>
		<result column="ata_code" property="ata_code"/>
	</resultMap>
	
	<select id="atlist" parameterType="hashMap" resultMap="atlistResult">
	 				select a.ac_num ac_num
                  ,(select mem_name from member where mem_code=ac.mem_code) myname
                  ,atapply.ata_myacmemo ata_myacmemo
                  ,atapply.ata_yourac ata_yourac
                  ,(select mem_name from member where mem_code=atapply.ata_yourmemcode) yourname
                  ,atapply.ata_youracmemo ata_youracmemo
                  ,atapply.ata_startdate ata_startdate
                  ,atapply.ata_stopdate ata_stopdate
                  ,atapply.ata_setmoney ata_setmoney
                  ,atapply.ata_dterm ata_dterm
                  ,atapply.ata_time ata_time
                  ,atapply.ata_ing ata_ing
                  ,atapply.ata_check ata_check
                  ,atapply.ata_code ata_code
                
                  from at_application atapply, account a, account_client ac
                  where atapply.ac_code =a.ac_code and a.ac_code = ac.ac_code and ac.mem_code=#{mem_code} and a.ac_num=#{ac_num}
	
	</select>
	
	<update id="ifnomoneywhenat" parameterType="String">
	update at_application set ata_check = -1 where ata_code=#{ata_code}
	</update>
	
	<update id="atreset" parameterType="hashMap">
	update at_application set ata_startdate=#{restartdate},ata_time=#{retime} where ata_code=#{ata_code}
	</update>
	
	<delete id="atdelete" parameterType="String">
	delete at_application where ata_code =#{ata_code}
	</delete>
<!-- /@자동이체 종료 -->




  
  
  
  
  
  
  
  
  </mapper>